1. What is a binary tree and what makes it unique to other trees?
A- A binary tree is different from other trees because each node can only have up to 
2 child nodes, and the child nodes have to be organized such that the right node is greater
and the left node is less than the parent

2. What is a heuristic?
A- a heuristic is basically an educated guess. You can use them as a shortcut to 
gain efficiency by sacrificing complete accuracy.

3. What is another problem besides the shortest-path problem that requires 
the use of heuristics?
Heuristics are often identified in behavioral studies, like 'absurdity heuristic' which is the
idea that if it sounds too good to be true, it probably is. Stereotyping is also an example of
applied heuristics, like someone who was attacked by a pit bull before who now avoids aggressive
dogs by staying away from dogs that look like pit bulls.

4. What is the difference between a depth-first search and a breadth-first search?
A- A depth-first search goes down/up the paths of the tree one branch at a time, 
from parent to child node. A breadth-first search will go level by level through the tree,
starting at the top level and moving down. It searches a row of nodes that aren't
connected to each other, rather than moving down a branch.

5. Explain in your own words what an undirected, a-cyclic, unweighted graph is.
A- Undirected means that nodes are connected together, but the connection isn't
attached to any order. A-cyclic means that connected nodes don't form a circle - 
if you follow their path, you end up at a dead end rather than back at the start.
Unweighted means that things are connected, but that connection doesn't have any 
value or measurement associated with it, like a distance. 


6. What kind of graph is a binary search tree?
A- Undirected, a-cyclic, unweighted

1.Given a Binary Search Tree and a value, write a function that checks to see 
whether the value exists within the tree.

Example: The value 10 exists in the tree. The value 23 does not exist in the tree.
A- Starting with the root node, for each node:
 -if the desired value is equal to the node value, return that node. 
 -If the desired value is greater than the root value, follow the path right to the next node. 
 -If the desired value is less than the root value, follow the path left to the next node.
  If we return the value, then it is in the tree. If we reach a dead end, it is not

function findInTree(val) {
  var currentNode;
  currentNode = this.root;
  var doesContain = false;
  while(currentNode){                              // If we hit a dead end, the loop will end and will return false
  if(val === currentNode.value) {
    doesContain = true;                            // If value is found, will return true
  } else if (val > currentNode.value) {
    currentNode = currentNode.right                // If value is greater, will go right
  } else if (val < currentNode.value ) {
    currentNode = currentNode.left                 // If value is less, will go left
  } 
   return doesContain;
  }
}

2. Given a Binary Search Tree and two nodes, n1 and n2, write a function that 
finds the distance between the two nodes.

Example: The distance between the nodes 4 and 10 is 4. The distance between the 
nodes 8 and 10 is 1. The distance between the nodes 1 and 14 is 4.

A - we need to figure out the node where they branch from each other (lowest common ancestor),
 then find each node's distance from that node and add them together.
 For 8 and 10:
-LCA is 8
-8's distance from 8 is 0
-10's distance from 8 is 1
-0 + 1 = 1
-Distance between 8 and 10 is 1


function findLCA(root, node1, node2) {
  let LCA;
  if (root === node1 || root === node2) {
    LCA = root;
  }
  var left = findLCA(root.left, node1, node2);
  var right = findLCA(root.right, node1, node2);
  
  if(left && right)
    return root;
  else if(left)
    return left;
  else
  return right;
}

function findDepth(currentNode, targetNode){
  let depth = 0;
  if(currentNode == targetNode){
    return depth;
  } else if (currentNode.value < targetNode.value){
    currentNode = currentNode.left;
    depth ++;
  } else if(currentNode.value > targetNode.value){
    currentNode = currentNode.right;
    depth ++;
  }
}
    

function findDistance(root, node1, node2){
  var LCA = LCA(root, node1, node2);
  var depthNode1 = findDepth(LCA, node1);
  var depthNode2 = findDepth(LCA, node2);
  var distanceBetween = depthNode1 + depthNode2;
}

