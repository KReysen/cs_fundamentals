

1) What are some pros and cons of using linked lists instead of arrays?
A) Pros - using a linked list gives functionality similar to an array without tying up consecutive memory locations
or using empty placeholders, so it is less demanding on memory (especially important for a large array/list)
Cons- not being able to use indexing to find locations - because the data can exist anywhere, you can only access 
data in order and starting with the first node, going through all the nodes and not skipping any

 
2) Come up with a real world example of a linked list.
A) Traveling by train as opposed to airplane. Like an array, the plane can leave the airport and go to any other airport,
it just needs to know the location. The train leaves from a station and is bound by the tracks, so it has to follow its 
route, passing the stops in order every time - it can't skip ahead to a later stop in the order.

1) The linked list push function should take a value, create a node, and add it to the end of a list. Below is pseudocode for a 
push function for a singly linked list. However, there is something wrong with it. 
Submit both an explanation of the bug and a functional implementation of the method.


FUNCTION push(element)
CREATE node
SET node.value TO element
SET node.next TO null

IF the head node does not exist
 THEN SET head to node
ELSE
 SET current to head
 SET current.next to node
// Need to add in while loop here
 WHILE there is a next node,
 SET current to the next node
   current.next = node
END IF
END FUNCTION

This has an if/else statement to set the head node and second node, but it doesn't have any way to move to 
other nodes after that. Instead of the if statement, it needs a loop for progressing through the nodes to the end
of the list to add the new one

class LinkedList {

  constructor() {
    this.head = null;
  }

  push(element) {
    var node = {
      data: element,
      next: null
    };

    if (!this.head) {
      this.head = node;
    } else {
      var current = this.head;
      while (current.next) {
        current = current.next;
      }
      current.next = node;
    }
  }
}

2) Given an unsorted singly linked list, remove all duplicates from the linked list.
Example
Input: a -> c -> d -> d -> a
Output: a -> c -> d

Plan - iterate through list with each node
For each node, iterate through list again and compare to the current node
If it is the same, remove it from the list

LinkedList.prototype.removeDuplicates = function() {
  // Empty or a single element Linked List
  if (!this.head || !this.head.next) {
    console.log('No duplicates');
    return;
  }

  var previousNode;
  var currentNode;
  var nextNode;
  var val;
  currentNode = this.head;

  while (currentNode) {
    val = currentNode.data;
    previousNode = currentNode;
    nextNode = previousNode.next;

    while (nextNode) {
      if (nextNode.data === val) {
          previousNode.next = nextNode.next;
      } else {
        previousNode = nextNode;
      }
      nextNode = nextNode.next;
    }

    currentNode = currentNode.next;
  }
};

Test:
var test2 = new LinkedList();
var exercise2 = ['a', 'c', 'd', 'd', 'a'];     // create list for test case
exercise2.forEach(el => test2.push(el));
console.log(test2);                             // returns a - c - d- d- a
test2.removeDuplicates();
console.log(test2);                             // returns a - c - d

3) Given an unsorted singly linked list, reverse it.
Example
Input: a -> b -> c -> d
Output: d -> c -> b -> a


LinkedList.prototype.reverseList = function () {
  var previousNode = null;
  var currentNode = this.head;
  var nextNode;
   
  while (currentNode) {                
    nextNode = currentNode.next;        
    currentNode.next = previousNode;    
    previousNode = currentNode;         
    currentNode = nextNode;             
  }
  this.head = previousNode;
}

Test:
var test3 = new LinkedList();
var exercise3 = ['a','b','c','d'];           // create new list and add data for test
exercise3.forEach(el => test3.push(el));
console.log(test3);                          // returns a b c d
test3.reverseList();
console.log(test3);                          // returns d c b a